[{"title":"在线升级服务器搭建","url":"/posts/1000/","content":"\n- top\n- 配置\n- 需要文件\n\n<!-- more -->\n\n\n# top\n网络top如图所示：\n![1](/gallery/md_tu/1000/1.png)\n\n# 具体配置：\n1.配置上行路由器LAN口地址为：47.242.66.1/24\n![2](/gallery/md_tu/1000/2.png)\n2.配置PC2网口地址为：47.242.66.129，子网掩码为255.255.255.0，网关为47.242.66.1\n![3](/gallery/md_tu/1000/3.png)\n3.关闭PC2网络防火墙\n![4](/gallery/md_tu/1000/4.png)\n4.PC2运行IPOP(文档下方取)，在IPOP中开启WEB服务器，在电脑桌面选择创建一个文件夹，web服务器的根路径选择这个文件夹，点击start开启服务器\n![5](/gallery/md_tu/1000/5.png)\n5.PC2中将hnk-ax1806压缩文件(见文档下方)解压到4步骤中的根目录中\n![6](/gallery/md_tu/1000/6.png)\n6.手机连接1806 WIFI，输入密码登录APP便可以开始在线升级。\n\n# 需要文件：\n版本升级包、[IPOP.exe](https://xiazai.zol.com.cn/detail/50/490912.shtml)","categories":["服务器搭建"],"tags":["服务器","局域网环境","版本升级"]},{"title":"路由器 TC 打流操作","url":"/posts/2100/","content":"\n- WAN-LAN-IPv4\n- WAN-LAN-IPv6\n- 环境问题排查\n\n<!-- more -->\n\n\n# Wan to lan ipv4模式下有线打流\n\n**按拓扑图配置好路由器配置，并连接网线，拓扑图如下**\n![1](/gallery/md_tu/2100/1.png)\n**打开testcenter仪表软件**\n![2](/gallery/md_tu/2100/2.png)\n**连接testcenter，并选择仪表口**\n![3](/gallery/md_tu/2100/3.png)\n![4](/gallery/md_tu/2100/4.png)\n**给连接DUT wan侧的仪表口，添加模拟PC1**\n![5](/gallery/md_tu/2100/5.png)\n![6](/gallery/md_tu/2100/6.png)\n![7](/gallery/md_tu/2100/7.png)\n![8](/gallery/md_tu/2100/8.png)\n**勾选ping，发送ARP请求，学习DUT WAN侧MAC**\n![9](/gallery/md_tu/2100/9.png)\n![10](/gallery/md_tu/2100/10.png)\n**给连接DUT lan侧的仪表口，添加模拟PC2**\n![11](/gallery/md_tu/2100/11.png)\n![12](/gallery/md_tu/2100/12.png)\n![13](/gallery/md_tu/2100/13.png)\n**勾选ping，发送ARP请求，学习DUT LAN侧MAC**\n![14](/gallery/md_tu/2100/14.png)\n![15](/gallery/md_tu/2100/15.png)\n**给连接DUT lan侧的仪表口，添加模拟PC3**\nMAC填写DUT wan侧MAC，IP与DUT WAN侧IP设置保持一致\n登录DUT web，开启DMZ，主机地址选择PC2的地址\n**建流**\n![16](/gallery/md_tu/2100/16.png)\n![17](/gallery/md_tu/2100/17.png)\n![18](/gallery/md_tu/2100/18.png)\n![19](/gallery/md_tu/2100/19.png)\n![20](/gallery/md_tu/2100/20.png)\n![21](/gallery/md_tu/2100/21.png)\n**更改流类型**\n![22](/gallery/md_tu/2100/22.png)\n![23](/gallery/md_tu/2100/23.png)\n**启动发包**\n![24](/gallery/md_tu/2100/24.png)\n![25](/gallery/md_tu/2100/25.png)\n![26](/gallery/md_tu/2100/26.png)\n**查看结果**\n![27](/gallery/md_tu/2100/27.png)\n![28](/gallery/md_tu/2100/28.png)\n\n\n# Wan to lan ipv6模式下有线打流\n\n**按拓扑图配置好路由器配置，并连接网线，拓扑图如下**\n![29](/gallery/md_tu/2100/29.png)\n**打开testcenter仪表软件**\n![30](/gallery/md_tu/2100/30.png)\n**连接testcenter，并选择仪表口**\n![31](/gallery/md_tu/2100/31.png)\n![32](/gallery/md_tu/2100/32.png)\n**给连接DUT wan侧的仪表口，添加模拟PC1**\n![33](/gallery/md_tu/2100/33.png)\n![34](/gallery/md_tu/2100/34.png)\n![35](/gallery/md_tu/2100/35.png)\n![36](/gallery/md_tu/2100/36.png)\n**开启端口抓包，获取WAN侧本地链路地址**\n![37](/gallery/md_tu/2100/37.png)\n拔插连接此仪表口的网线，再停止抓包，查看抓包信息获取WAN侧本地链路地址\n将此地址写入如下位置\n![38](/gallery/md_tu/2100/38.png)\n**勾选ping，发送ARP请求，学习DUT WAN侧MAC**\n![39](/gallery/md_tu/2100/39.png)\n**给连接DUT lan侧的仪表口，添加模拟PC2**\n![40](/gallery/md_tu/2100/40.png)\n![41](/gallery/md_tu/2100/41.png)\n![42](/gallery/md_tu/2100/42.png)\n![43](/gallery/md_tu/2100/43.png)\n**开启端口抓包，获取LAN侧本地链路地址**\n![44](/gallery/md_tu/2100/44.png)\n拔插连接此仪表口的网线，再停止抓包，查看抓包信息获取LAN侧本地链路地址\n将此地址写入如下位置\n![45](/gallery/md_tu/2100/45.png)\n**勾选ping，发送ARP请求，学习DUT LAN侧MAC**\n![46](/gallery/md_tu/2100/46.png)\n![47](/gallery/md_tu/2100/47.png)\n**建流**\n![48](/gallery/md_tu/2100/48.png)\n![49](/gallery/md_tu/2100/49.png)\n![50](/gallery/md_tu/2100/50.png)\n![51](/gallery/md_tu/2100/51.png)\n![52](/gallery/md_tu/2100/52.png)\n![53](/gallery/md_tu/2100/53.png)\n**更改流类型**\n![54](/gallery/md_tu/2100/54.png)\n![55](/gallery/md_tu/2100/55.png)\n**启动发包**\n![56](/gallery/md_tu/2100/56.png)\n注意：基于流查看双向流是否OK\n**查看结果**\n![57](/gallery/md_tu/2100/57.png)\n![58](/gallery/md_tu/2100/58.png)\n![59](/gallery/md_tu/2100/59.png)\n\n# 环境问题排查\n若仪表端口灯熄灭，请检查网线连接是否松动\n若仪表端口灯为红灯，请检查端口类型是否正确\n![60](/gallery/md_tu/2100/60.png)\n若单方向流量不通，先检查wan口是否固定，接线配置均正确的情况下，再通过ping和抓包的方式确认模拟PC是否构建OK，若OK再检查所建发包流是否正确，逐一排查问题","categories":["TC打流指导"],"tags":["性能测试","思博伦","路由器"]},{"title":"WiFi 性能测试指导","url":"/posts/2000/","content":"\n- LAN-WiFi\n- WAN-WiFi\n- 测试标准\n- 常见问题及注意事项\n\n<!-- more -->\n\n\n# 测试工具及环境要求\n\t\n**Ixchariot工具介绍**\nIxchariot拥有强大的控制端和终端模拟操控技术，是由美国IXIA公司出品的一款世界知名的应用层性能测试软件，是一款中文版的安卓手机网络测试工具。内置了专业的控制端和模拟操作技术，它能够评估网络应用的性能和容量，对网络和设备进行压力测试，让你详细了解当前网络状况，得到设备及网络在不同应用、不同参数下的吞吐量、时延、丢包、反应时间等性能参数。\n注：下载安装方法详见链接：[ixchariot破解版-ixchariot(网络测试工具) V6.7破解版下载](http://www.winwin7.com/soft/51281.html)\n**环境要求**\n屏蔽房内无其他设备信号干扰环境下测试\n\n# 测试指导\n\n## LAN-WiFi\n**测试设备**\n一台支持AX网卡的高性能笔记本\n一台普通笔记本（均安装IxChariot打流软件）或手机（安装endpoint端）、一台测试路由器\n**测试组网**\nPC1通过WiFi与路由器连接；PC2有线连接路由器LAN口。\n![1](/gallery/md_tu/2000/1.png)\nTX测试：有线到无线的吞吐量，PC2->PC1，表示下行\nRX测试：无线到有线的吞吐量，PC1->PC2，表示上行\n                                                  \n### IPV4 性能测试方法\n**测试步骤**\nStep1：PC2有线连接路由，自动获取IP地址，PC1或手机（安装endpoint端）连接路由WiFi热点，打开手机endpoint端或启动PC2上Ixchariot endpoint端\n![2](/gallery/md_tu/2000/2.png)\nStep2：IxChariot工具流量设置（如下图）：\n![3](/gallery/md_tu/2000/3.png)\n![4](/gallery/md_tu/2000/4.png)![5](/gallery/md_tu/2000/5.png)\n信息填写完成后，点击OK即可创建一条数据流。此数据流从endpiont1向endpoint2发送，也就是192.168.11.2->192.168.11.7，使用TCP通过High_proformance_through脚本发送。\n![6](/gallery/md_tu/2000/6.png)  \n注:一般情况下一条流基本上都达不到DUT硬件以及软件转发的极限的，可以多加一些，一般选择10条，流的数量增加直接Ctrl+C、Ctrl+V就可以完成。\n注:脚本选择后如果需要修改跑流方向，可以通过脚本选择对话框中Edit This Script按钮打开脚本选择12行，点击切换按钮可进行数据流切换。\n![7](/gallery/md_tu/2000/7.png)\n![8](/gallery/md_tu/2000/8.png)\nStep3：打流时间设置：点击IxChariot工具的Run->Set Run options->Run Options：\n![9](/gallery/md_tu/2000/9.png)\n红框中选项为测试时间设置，默认为第一个，表示测试过程中如果任一条流中断就停止。这里我们选第三个自定义时间，根据测试需求自行设定，比如30s、1小时或者48小时等。\n注:如果设置长时间测试，尽量把下面的图形界面关掉，免得软件挂死。\nStep4：跑流启动。点击工具栏中人形图标后跑流开始。\n![10](/gallery/md_tu/2000/10.png)\n![11](/gallery/md_tu/2000/11.png)\n跑流开始之后就可以点击Through这里查看流量了。\n跑完的结果是上图这样的，也可以换个方向打流：（TX： LAN-WIFI   RX： WiFi-LAN）\n![12](/gallery/md_tu/2000/12.png)\n测试结果观察点：\n1.跑流线要相对平稳，无掉坑现象\n2.测试的出来吞吐量数据跟竞品对比不得低于竞品的10%\n\n### IPV6 性能测试方法\nStep1：在网络设置中开启IPv6，并配置静态地址，\n![13](/gallery/md_tu/2000/13.png)\nStep2：固定wan口，PC1有线接入到路由器端的WAN口，并在在web端固定WAN口\n![14](/gallery/md_tu/2000/14.png)\nStep3：配置PC静态地址\n打开网卡设置PC1（有线连接路由）的IPv6静态地址\n![15](/gallery/md_tu/2000/15.png)\nStep4：PC获取IPv6地址\n设置完以上后，PC1已经获取静态的IPv6地址，PC2无线连接到路由，获取IPv6（动态）地址，此时PC1和PC2时能ping通的\n![16](/gallery/md_tu/2000/16.png)\n![17](/gallery/md_tu/2000/17.png)\nStep5：IxChariot配置参数、建流、运行时间、跑吞吐量的步骤同IPV4的步骤。\n\n## WAN-WiFi\n\n**测试设备**\n一台支持AX网卡的高性能笔记本\n一台普通笔记本（均安装IxChariot打流软件）或手机（安装endpoint端）、一台测试路由器\n**测试组网**\nPC1通过网线与路由器WAN口连接；PC2通过WiFi连接路由器。\n![18](/gallery/md_tu/2000/18.png)\nTX测试：有线到无线的吞吐量，PC1->PC2，表示下行\nRX测试：无线到有线的吞吐量，PC2->PC1，表示上行   \n \n### IPV4 性能测试方法\nStep1：配置上网方式\n（1）PC1、PC的IP地址、网关地址配置如上图。（注：PC1、PC2、路由均关闭防火墙）\n（2）路由器配置：\n![19](/gallery/md_tu/2000/19.png)![20](/gallery/md_tu/2000/21.png)\n![21](/gallery/md_tu/2000/21.png)![22](/gallery/md_tu/2000/22.png)\nStep2：IxChariot工具流量设置\n![23](/gallery/md_tu/2000/23.png)![24](/gallery/md_tu/2000/24.png)\nService quality可以默认不选择，选择脚本后如下图选择High_performance_throught：\n![25](/gallery/md_tu/2000/25.png)![26](/gallery/md_tu/2000/26.png)\n以上即创建了一条数据流，性能测试通常需要10条，可以通过Ctrl+C、Ctrl+V就可以完成。\n![27](/gallery/md_tu/2000/27.png)\n![28](/gallery/md_tu/2000/28.png)\n这10条流表示从endpiont1向endpoint2发送，也就是从10.1.1.2-> 192.168.11.4。使用TCP通过High_proformance_through脚本发送。\nStep3：后续打流时间、启动、数据查看、数据流方向切换等同LAN-WiFi中IPv4部分操作。\n\n### IPV6 性能测试方法\nStep1：配置上网方式\n登录web配置上网方式为静态，手动进行配置\n![29](/gallery/md_tu/2000/29.png)\nStep2：配置路由静态地址\n在网络设置中开启IPv6，并配置静态地址。\n![30](/gallery/md_tu/2000/30.png)\nStep3：固定WAN口\nPC1有线接入到路由器端的WAN口，并在在web端固定WAN口\n![31](/gallery/md_tu/2000/31.png)\nStep4：配置PC静态地址\n打开网卡设置PC1（有线连接路由）的IPv6静态地址\n![32](/gallery/md_tu/2000/32.png)\nStep5：PC获取IPv6地址\n设置完以上后，PC1已经获取静态的IPv6地址，PC2无线连接到路由，获取IPv6（动态）地址，此时PC1和PC2时能ping通的\n![33](/gallery/md_tu/2000/33.png)\n![34](/gallery/md_tu/2000/34.png)\nStep6：后续步骤参考IPv4中的IxChariot配置参数、建流、运行时间、跑吞吐量的步骤。\n\n# 测试标准\n吞吐量数据跟竞品对比相差不得低于10%，具体以测试产品性能规格要求为准。\n![35](/gallery/md_tu/2000/35.png)\n\n# 常见问题及注意事项\n```\n网线要使用高性能cat6 类网线（通过LAN测协商速率查看）；\n网卡无法识别获取不到IP，重启几次网卡或者PC；\t\n产品与PC连接后，确保要有一台PC上有配置界面；PC或手机之间能够PING通；\n测试过程中出现数据上不去，调整天线与无线网卡天线的角度；\n测试时关闭防火墙；\n测试时要切换不同的信道、频宽、模式，刚切换后会存在吞吐量上不去现象。\n如果跑流过程中出现不通的情况，先确定PC之间是否正常PING通，如果不能就是链路出问题；如果PC可以ping通，跑流工具不出数据，先确定endpoint服务是不是挂死，如果是就重新拉起来，如果不是，可能是ixchariot卡了，保存进程退出重进。\n```","categories":["通讯类测试指导"],"tags":["通讯产品","性能测试"]},{"title":"Hexo 博客优化","url":"/posts/3/","content":"\n- 使用 Github Page\n- 添加 valine 评论系统\n- 添加字数统计和阅读时长\n- 在线图片\n- 代码同时部署到 coding\n- 百度站长平台添加网站管理\n\n<!-- more -->\n\n# Github Page 是 Github 提供的一种免费的静态网页托管服务，可以用来托管博客、项目官网等静态网页\n\n通过 hexo-deployer-git 插件可以实现一键将博客同时部署到多个git仓库中。如同时发布到github及gitee提供的pages服务。安装：\n\nnpm install hexo-deployer-git --save\n修改 Hexo 根目录下的 _config.yml 文件中的如下内容:\n\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n- type: git\n  repo: https://gitee.com/tianyichuxin/tianyichuxin.github.io.git\n  branch: master\n  ignore_hidden: false\n- type: git\n  repo: https://github.com/tianyichuxin/tianyichuxin.github.io.git\n  branch: master\n  ignore_hidden: false\n\n\n\nCND加速（建议启用）\n放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。也可以选择主流云服务商提供的对象存储+CDN来获得更快速及稳定的访问效果，费用低到几乎可忽略。\n\n用法：\n\nhttps://cdn.jsdelivr.net/gh/fengniexiao/fengniexiao.github.io@blog/css\n例如：\n\nhttps://cdn.jsdelivr.net/gh/lxl80/blog@gh-pages/medias/banner/1.jpg\n注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源。\n\n\n\n下载插件：\n\nnpm install hexo-symbols-count-time --save\n然后打开根目录的配置文件，复制粘贴以下内容：\n\nsymbols_count_time:\n  # 每篇文章显示\n  symbols: true\n  time: true\n  # 文章底部显示\n  total_symbols: false  \n  total_time: false\n  # 是否统计代码块\n  exclude_codeblock: false\n  awl: 2\n  wpm: 275\n  suffix: \"mins.\"\n\n\n\n\n添加RSS订阅\n首先执行命令\n\nnpm install hexo-generator-feed --save\n打开 Hexo 站点下的 _config.yml ,添加如下配置： 直接在底部复制粘贴以下内容即可\n\n# feed\n# Dependencies: https://github.com/hexojs/hexo-generator-feed\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n\n\n\n\n\n\n添加网站运行时间\n打开这个路径的文件：\n\nF:\\hexo\\blog\\themes\\next\\layout\\_partials\\footer.swig\n在文件的末尾复制粘贴以下内容：\n\n<!-- 网站运行时间的设置 -->\n<span id=\"timeDate\">载入天数...</span>\n<span id=\"times\">载入时分秒...</span>\n<script>\n    var now = new Date();\n    function createtime() {\n        var grt= new Date(\"03/01/2023 10:00:00\"); //此处修改你的建站时间或者网站上线时间\n        now.setTime(now.getTime()+250);\n        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);\n        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);\n        if(String(hnum).length ==1 ){hnum = \"0\" + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n        mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = \"0\" + mnum;}\n        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n        snum = Math.round(seconds); if(String(snum).length ==1 ){snum = \"0\" + snum;}\n        document.getElementById(\"timeDate\").innerHTML = \"本站已安全运行 \"+dnum+\" 天 \";\n        document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒.\";\n    }\nsetInterval(\"createtime()\",250);\n</script>\n\n\n\n","categories":["Hexo"],"tags":["Git"]},{"title":"Hexo 搭建博客 +Mustom 主题使用教程","url":"/posts/2/","content":"\n- node搭建Hexo博客\n- Mustom主题使用\n\n<!-- more -->\n\n# 准备环境\n\n**安装 node**\n初次使用可直接到[Node.js](https://nodejs.org/zh-cn/download)官方网站下载对应操作系统安装包\n![1](/gallery/md_tu/2/1.png)\n双击打开安装，默认下一步即可\n![2](/gallery/md_tu/2/2.png)\n注：安装完成后默认会将模块安装在 C:\\Users\\ 用户名 \\AppData\\Roaming 路径下的 npm 和 npm_cache 中，不方便管理且占用 C 盘空间, 可更改目录（其中，npm 随安装程序自动安装，作用就是对 Node.js 依赖的包进行管理）\n**配置自定义的全局模块安装目录，在 node.js 安装目录下新建两个文件夹 node_global 和 node_cache，然后在 cmd 命令下执行如下两个命令：**\n```\nnpm config set prefix \"D:\\Program Files\\nodejs\\node_global\"\nnpm config set cache \"D:\\Program Files\\nodejs\\node_cache\"\n```\n**执行完后，配置环境变量，如下：**\n环境变量” -> “系统变量”：新建一个变量名为 “NODE_PATH”， 值为“D:\\Program Files\\nodejs\\node_global\\node_modules”\n环境变量” -> “用户变量”：编辑用户变量里的 Path，将相应 npm 的路径（“C:\\Users\\ 用户名 \\AppData\\Roaming\\npm”）改为：“D:\\Program Files\\nodejs\\node_global”\n**配置完成，测试：**\n安装完成\n![4](/gallery/md_tu/2/4.png)\n测试安装插件，在 cmd 命令下执行 npm install webpack -g 安装 webpack，会在node_cache中看到安装\n![3](/gallery/md_tu/2/3.png)\n**注：之前有安装过node的注意和npm的[版本对应](https://nodejs.org/zh-cn/download/releases)**\n![5](/gallery/md_tu/2/5.png)\n\n# 安装 Hexo，并创建一个 blog\n\n**使用 npm 开始安装 Hexo**\n```\nnpm install -g hexo-cli\n```\n**安装 Hexo 框架完成后，再执行下列命令，Hexo 将会在当前指定文件夹中新建所需要的文件。**\n```\nhexo init Blog\ncd Blog\nnpm install\n```\n**如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 http://localhost:4000 回车就可以预览效果了**\nhexo常用命令\n```\nhexo clean #清除 \nhexo g #生成静态文件\nhexo s #本地预览\nhexo d #部署\n```\n\n# Mustom主题使用\n\n**使用 hexo 中自己选择好的主题**\n可以到[官网主题页](https://hexo.io/themes/)或者网上找你喜欢的，很多都不错，我使用的是 Mustom 主题。\n![6](/gallery/md_tu/2/6.png)\n**将主题站整个克隆下载**\n```\ngit glone https://github.com/jinyaoMa/my-hexo-site.git\n```\n复制文件夹scaffolds、source、themes、package.json替换Blog文件夹下的文件\n![7](/gallery/md_tu/2/7.png)\n**推荐按照下载里的 package.json 来安装依赖，因为基本上安装的依赖都是用于优化和兼容。可以复制粘贴本站的 package.json 去替换原本的文件，之后运行命令 npm i 安装依赖。**\n**安装时package.json插件版本和当前node、npm版本不同有报错，对报缺失的依赖可单独安装**\n```\nnpm install xx --save\n```\n**安装hexo-all-minifier报错-被墙**\n```\nnpm切换国内源使用cnpm安装\n开启VPN后再尝试npm安装\n```\n**_config.yml 根配置使用主题 Mustom**\n```\n# 替换博客名字 \n# Site\ntitle: \" 风潇 - 博客网站 | FengXiao - Blog\"\nsubtitle: ''\ndescription: \" 风潇 - 博客网站 | FengXiao - Blog\"\nkeywords:\nauthor: Feng Xiao\nlanguage: en\ntimezone: ''\n\n# 修改博客指向网站\n# If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://fengniexiao.github.io\nroot: /\n\n# Directory\nsource_dir: source\npublic_dir: docs \n# 方便使用Github Page\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: code \n# markdown使用include_code标签\nskip_render:\n  - \"code/*.*\" \n  # 排除code_dir\n  - \"extension/**/*.html\" \n  # 排除extension\n  - \"*.html\"  \n  # 如果在在主目录source文件夹里放了搜索引擎验证的.html文件\n  - \"CNAME\" \n  # 如果在在主目录source文件夹里放了CNAME文件\n\n# Writing\nnew_post_name: :title.md \n# File name of new posts\ndefault_layout: post\ntitlecase: false \n# Transform title into titlecase\nexternal_link:\n  enable: true \n  # Open external links in new tab\n  field: site \n  # Apply to the whole site\n  exclude: \"\"\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace: \"  \"\n  wrap: true\n  hljs: false\n\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Metadata elements\n## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\nmeta_generator: true\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n## Use post's date for updated date unless set in front-matter\nuse_date_for_updated: false\n## updated_option supports 'mtime', 'date', 'empty'\nupdated_option: 'mtime'\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Include / Exclude file(s)\n## include:/exclude: options only apply to the 'source/' folder\ninclude:\nexclude:\nignore:\n\n# 修改主题为 Mustom\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: mustom\n\n# 修改博客地址和链接仓库\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:fengniexiao/fengniexiao.github.io.git\n  branch: master\n\n# layout.styl, frame.ejs, fontawesome.min.css, share.min.css, 搜索 cdn.jsdelivr.net 改 user/repo\n# 替换 https://cdn.jsdelivr.net/gh/jinyaoMa/jinyaoMa.github.io@1.0/asset/font\n# 替换 https://cdn.jsdelivr.net/gh/jinyaoMa/jinyaoMa.github.io@1.0/asset/img\nCDN_ENABLE: true\n\n##优化访问速度\n#压缩html、css、js\nall_minifier: true\n\nmarkdown: \n# 如果换了原装 hexo-renderer-marked, 用了 hexo-renderer-markdown-it\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n  plugins:\n    - markdown-it-abbr\n    - markdown-it-footnote\n    - markdown-it-ins\n    - markdown-it-sub\n    - markdown-it-sup\n  anchors:\n    level: 1\n    collisionSuffix: 'v'\n    permalink: true\n    permalinkClass: headerlink\n    permalinkSide: 'left'\n    permalinkSymbol: ''\nnofollow: \n# 如果装了 hexo-filter-nofollow\n  enable: true\n  field: post\nsitemap: \n# 如果装了 hexo-generator-sitemap\n  path: sitemap.xml\n  rel: true\nbaidusitemap:\n  path: baidusitemap.xml\nautoprefixer: \n# 如果装了 hexo-autoprefixer\n  exclude:\n    - \"*.min.css\"\n  overrideBrowserslist:\n    - \"last 2 versions\"\nbabelify: \n# 如果装了 hexo-renderer-babelify + @babel/preset-env\n  presets:\n    - \"@babel/preset-env\"\n  sourceMaps: false\nmathjax: \n# 如果装了 hexo-filter-mathjax\n  tags: none \n  # or 'ams' or 'all'\n  single_dollars: true \n  # enable single dollar signs as in-line math delimiters\n  cjk_width: 0.9 \n  # relative CJK char width\n  normal_width: 0.6 \n  # relative normal (monospace) width\n  ignore:\n  - \"**/source/asset/js/common/*.js\" \n  # 如果装了 hexo-renderer-babelify\n  - \"**/source/asset/js/part/*.js\" \n  # 如果装了 hexo-renderer-babelify\n  - \"**/source/asset/js/plugin/!(L2Dwidget.0.min.js)\" \n  # 如果装了 hexo-renderer-babelify\n\n# 百度主动推送\n# baidu_url_submit:\n  # count: 1000 # 提交最新的一个链接\n  # host:  # 在百度站长平台中注册的域名\n  # token: \"\" # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  # path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n\n# 用于划词翻译组件\nbaidu_translate:\n  appid: \"\"\n  appkey: \"\"\n\n#评论系统\nvaline:\n  enable: true\n  appid: \"\"\n  appkey: \"\"\n  notify: false\n  verify: false\n  placeholder: ヾﾉ≧∀≦)o 来呀，快写点什么吧！\n  avatar: mm\n  guest_info: nick,mail,link\n  pageSize: 10\n  visitor: false\n \n# 文章字数统计\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n\n# 搜索引擎验证\ngoogle_site_verification: \"\"\nbaidu_site_verification: \"\"\n\n# clustrmaps访问监控，详情至：https://clustrmaps.com/\nclustrmaps:\n  enable: true\n  id: \"clstr_globe\" \n  # clstr_globe / clustrmaps\n  src: \"//cdn.clustrmaps.com/globe.js?d=...\"\n\n# adScript: ''\n```\n\n```\n├─CNAME : 修改锁定github pages域名定向\n├─_posts : 编辑文章md\n├─records : 这是个“记录”单页面\n|    ├─content.yml : 修改组件加载时读取数据\n|    └index.md\n├─gallery : 这是个“图库”单页面\n├─extension : 这个是本站左下角的扩展功能\n|     ├─content.yml : 修改扩展组件加载读取数据\n|     ├─resume : “简历生成”扩展\n|     ├─letter : “求职信”扩展\n├─about : 修改“关于”单页面\n|   └index.md\n```\n\n**使用主题时涉及的文件及文件夹**\n```\n├─_config.yml : 主题配置文件，改菜单、改图标、改皮肤、改音乐/一言组件配置、新增组件时涉及\n├─source : 主题资源文件夹\n|   ├─asset\n|   |   ├─part : 所有组件模板文件放这\n|   |   ├─lang : 所有的语言界面资源文件放这\n|   |   |  ├─en.yml : 英文\n|   |   |  └zh-cn.yml : 中文\n|   |   ├─js : 所有的JS资源文件放这\n|   |   | ├─main.js : 管理所有资源的加载和程序（修改ajax内url）\n|   |   | ├─part : 所有组件加载必要的模块\n|   |   |  |   |-codelib.js（修改ajax内url）\n|   |   |  |   |-iconlib.js（修改url）\n|   |   ├─img : 主题所有背景图片\n|   |   ├─css : 所有的样式文件放这\n|   |   |  ├─style.styl : 引用了所有的样式\n|   |   |  ├─_part : 所有组件样式\n├─layout : 主题预处理页面模板文件夹\n|   ├─_partial\n|   |    └frame.ejs : 网页模板，增减改组件和修改头部模板时涉及\n|   |       -_part : 模板web标签\n```\n\n# 主题部署\ncmd 进入博客的根目录，在根目录下执行 hexo clean , hexo g , hexo s\n**hexo g 报错 import and export may appear with ‘sourceType:moudule’**\n在报错文件目录下添加文件.babelrc\n```\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"node\": \"10.15.3\"\n      }      \n    }]\n  ]\n}\n```","categories":["Hexo"],"tags":["Mustom"]},{"title":"Hexo 主题 Mustom 使用指南（对应主题 1.0 版）","url":"/posts/1/","content":"\n- 本主题[Mustom](//github.com/jinyaoMa/hexo-theme-mustom)是我参考了卡片式和窗口展示的样式设计的Hexo主题。\n- 本主题通过大量的replaceWith函数和PJAX来加载，而且用了Live2D的插件，初始加载时回流特别厉害。\n- 本主题可以衍生一个CSS的框架，但是作者本人目前还是在给每个组件都弄一个单独的样式表。\n- 本主题把各类资源文件都分门别类了，在以后添加内容方面应该还是较方便的。\n\n<!-- more -->\n\n# Hexo根目录结构\n\n**注：主题文件可以下载[本站](//github.com/jinyaoMa/ma-jinyao.cn)所有源代码后，通过复制粘贴`themes/mustom`文件夹获得，或者下载[Mustom](//github.com/jinyaoMa/hexo-theme-mustom)所有源代码获得**\n**注：以下文件及文件夹都是使用Mustom主题必要的结构**\n\n先来看看[本站](//github.com/jinyaoMa/ma-jinyao.cn)的根目录结构。\n\n```\n├─scaffolds    : 模板\n├─source       : 内容资源文件夹\n├─themes       : 下载的主题放这里\n├─package.json : 里面可以看我都用了什么没有魔改过的Hexo插件\n├─_config.yml  : 根配置文件\n```\n\n这就是一个普通Hexo建站的初始结构。这里主要讲下，**使用我的Mustom主题时，可以使用`scaffolds`里我的模板，里面包含了必要的front-matter变量。可以复制粘贴整个`scaffolds`文件去覆盖原本的文件夹。推荐按照[本站](//github.com/jinyaoMa/ma-jinyao.cn)里的`package.json`来安装依赖，因为基本上安装的依赖都是用于优化和兼容。可以复制粘贴本站的`package.json`去替换原本的文件，之后运行命令`npm i`安装依赖。之后所有的例子默认都使用了我的模板和依赖之后的操作。**\n\n# _config.yml根配置文件\n\n**注：使用本主题的你可以在上面添加变量和修改变量的值，但是最好不要删除某一个变量，你可以留个空字符串**\n**可以在复制粘贴以下配置之后，通过网站效果慢慢改**\n\n``` yml\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: \"耀 の 个人网站 | Mark の Personal Website\"\ndescription: \"耀の个人网站, 耀的个人网站, Mark の Personal Website, Mark's Personal Website, 耀的部落阁, 耀の部落阁, jinyaoMa, Mustom, Hexo\"\nauthor: jinyaoMa ( 耀 / Mark )\nyear: 2019 # 建站年\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://ma-jinyao.cn\nroot: /\n\n# Directory\nsource_dir: source\npublic_dir: docs # 方便使用Github Page\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: code # markdown使用include_code标签\nskip_render:\n  - \"code/*.*\" # 排除code_dir\n  - \"extension/**/*.html\" # 排除extension\n  - \"*.html\" # 如果在在主目录source文件夹里放了搜索引擎验证的.html文件\n  - \"CNAME\" # 如果在在主目录source文件夹里放了CNAME文件\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link:\n  enable: true # Open external links in new tab\n  field: site # Apply to the whole site\n  exclude: \"\"\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace: \"  \"\n  wrap: true\n  hljs: false\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n## Use post's date for updated date unless set in front-matter\nuse_date_for_updated: false\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: mustom\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  - type: baidu_url_submitter\n  - type: git\n    repo:\n\nall_minifier: true # 如果装了 hexo-all-minifier\nmarkdown: # 如果换了原装 hexo-renderer-marked, 用了 hexo-renderer-markdown-it\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n  plugins:\n    - markdown-it-abbr\n    - markdown-it-footnote\n    - markdown-it-ins\n    - markdown-it-sub\n    - markdown-it-sup\n  anchors:\n    level: 1\n    collisionSuffix: 'v'\n    permalink: true\n    permalinkClass: headerlink\n    permalinkSide: 'left'\n    permalinkSymbol: ''\nnofollow: # 如果装了 hexo-filter-nofollow\n  enable: true\n  field: post\nsitemap: # 如果装了 hexo-generator-sitemap\n  path: sitemap.xml\n  rel: true\nautoprefixer: # 如果装了 hexo-autoprefixer\n  exclude:\n    - \"*.min.css\"\n  overrideBrowserslist:\n    - \"last 2 versions\"\nbabelify: # 如果装了 hexo-renderer-babelify + @babel/preset-env\n  presets:\n    - \"@babel/preset-env\"\n  sourceMaps: false\nmathjax: # 如果装了 hexo-filter-mathjax\n  tags: none # or 'ams' or 'all'\n  single_dollars: true # enable single dollar signs as in-line math delimiters\n  cjk_width: 0.9 # relative CJK char width\n  normal_width: 0.6 # relative normal (monospace) width\n\nignore:\n  - \"**/source/asset/js/common/*.js\" # 如果装了 hexo-renderer-babelify\n  - \"**/source/asset/js/part/*.js\" # 如果装了 hexo-renderer-babelify\n  - \"**/source/asset/js/plugin/!(L2Dwidget.0.min.js)\" # 如果装了 hexo-renderer-babelify\n\n# 百度主动推送\nbaidu_url_submit:\n  count: 1000 # 提交最新的一个链接\n  host: ma-jinyao.cn # 在百度站长平台中注册的域名\n  token: \"\" # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n\nbaidu_translate: # 用于划词翻译组件\n  appid: \"\"\n  appkey: \"\"\n\nvaline: # 用于评论组件\n  appid: \"\"\n  appkey: \"\"\n\n# 搜索引擎验证\ngoogle_site_verification: \"\"\nbaidu_site_verification: \"\"\n```\n\n# themes/mustom目录结构\n\n接下来看看[themes/mustom](//github.com/jinyaoMa/ma-jinyao.cn/tree/master/themes/mustom)的目录结构。\n\n```\n├─_config.yml : 主题配置文件，改菜单、改图标、改皮肤、改音乐/一言组件配置、新增组件时涉及\n├─source : 主题资源文件夹\n|   ├─browser.ejs : 不用babelify时旧浏览器会重定向到这个页面\n|   ├─robots.txt\n|   ├─sw.tpl : pwa需要加载的service worker模板\n|   ├─asset\n|   |   ├─part : 所有组件模板文件放这\n|   |   |  ├─audioplayer.ejs\n|   |   |  ├─brand.ejs\n|   |   |  ├─codelib.ejs\n|   |   |  ├─comment.ejs\n|   |   |  ├─extension.ejs\n|   |   |  ├─footer.ejs\n|   |   |  ├─gallery.ejs\n|   |   |  ├─goingto.ejs\n|   |   |  ├─hitokoto.ejs\n|   |   |  ├─menus.ejs\n|   |   |  ├─page.ejs\n|   |   |  ├─panels.ejs\n|   |   |  ├─pather.ejs\n|   |   |  ├─post.ejs\n|   |   |  ├─recentposts.ejs\n|   |   |  ├─records.ejs\n|   |   |  ├─search.ejs\n|   |   |  ├─settings.ejs\n|   |   |  ├─sitename.ejs\n|   |   |  ├─skin.ejs\n|   |   |  ├─timeline.ejs\n|   |   |  ├─toc.ejs\n|   |   |  ├─translater.ejs\n|   |   |  ├─xaside.ejs\n|   |   |  ├─xcanvas.ejs\n|   |   |  ├─xdrawer.ejs\n|   |   |  └xsearch.ejs\n|   |   ├─live2d : Live2D的文件放这\n|   |   |   ├─haruto.model.json\n|   |   |   ├─haruto.physics.json\n|   |   |   ├─mtn\n|   |   |   |  ├─01.mtn\n|   |   |   |  ├─02.mtn\n|   |   |   |  ├─03.mtn\n|   |   |   |  ├─04.mtn\n|   |   |   |  ├─05.mtn\n|   |   |   |  ├─06.mtn\n|   |   |   |  ├─07.mtn\n|   |   |   |  ├─08.mtn\n|   |   |   |  ├─09.mtn\n|   |   |   |  └idle_02.mtn\n|   |   |   ├─moc\n|   |   |   |  ├─haruto.moc\n|   |   |   |  ├─haruto.2048\n|   |   |   |  |      └texture_00.png\n|   |   ├─lang : 所有的语言界面资源文件放这\n|   |   |  ├─en.yml : 英文\n|   |   |  └zh-cn.yml : 中文\n|   |   ├─js : 所有的JS资源文件放这\n|   |   | ├─main.js : 管理所有资源的加载和程序\n|   |   | ├─nomodule.js : 不使用babelify时用得到的旧浏览器重定向\n|   |   | ├─plugin : 所有第三方JS插件模块\n|   |   | |   ├─APlayer.min.js\n|   |   | |   ├─av-min.js\n|   |   | |   ├─evanyou.js\n|   |   | |   ├─L2Dwidget.0.min.js\n|   |   | |   ├─L2Dwidget.min.js\n|   |   | |   ├─md5.min.js\n|   |   | |   ├─Meting.min.js\n|   |   | |   ├─socialShare.min.js\n|   |   | |   └Valine.min.js\n|   |   | ├─part : 所有组件加载必要的模块\n|   |   | |  ├─audioplayer.js\n|   |   | |  ├─brand.js\n|   |   | |  ├─codelib.js\n|   |   | |  ├─comment.js\n|   |   | |  ├─extension.js\n|   |   | |  ├─footer.js\n|   |   | |  ├─gallery.js\n|   |   | |  ├─goingto.js\n|   |   | |  ├─hitokoto.js\n|   |   | |  ├─menus.js\n|   |   | |  ├─page.js\n|   |   | |  ├─panels.js\n|   |   | |  ├─pather.js\n|   |   | |  ├─post.js\n|   |   | |  ├─recentposts.js\n|   |   | |  ├─records.js\n|   |   | |  ├─search.js\n|   |   | |  ├─settings.js\n|   |   | |  ├─sitename.js\n|   |   | |  ├─skin.js\n|   |   | |  ├─timeline.js\n|   |   | |  ├─toc.js\n|   |   | |  ├─translater.js\n|   |   | |  ├─xaside.js\n|   |   | |  ├─xcanvas.js\n|   |   | |  ├─xdrawer.js\n|   |   | |  └xsearch.js\n|   |   | ├─common : 包含所有通用JS函数\n|   |   | |   ├─ajax.js\n|   |   | |   ├─api.js\n|   |   | |   ├─config.js\n|   |   | |   ├─fetch.js\n|   |   | |   ├─lang.js\n|   |   | |   ├─part.js\n|   |   | |   ├─storage.js\n|   |   | |   └util.js\n|   |   ├─img : 所有的固定图像资源文件放这\n|   |   |  ├─android-chrome-192x192.png\n|   |   |  ├─android-chrome-512x512.png\n|   |   |  ├─author.large.png\n|   |   |  ├─author.medium.png\n|   |   |  ├─author.small.png\n|   |   |  ├─by-nc-sa.svg\n|   |   |  ├─icon.large.png\n|   |   |  ├─icon.medium.png\n|   |   |  ├─icon.small.png\n|   |   |  ├─qf3cu.huaji.png\n|   |   |  ├─qf3cu.jpg\n|   |   |  ├─qf3cu.png\n|   |   |  ├─qf3cu.temp.bw.png\n|   |   |  ├─qf3cu.temp.png\n|   |   |  ├─qq.png\n|   |   |  ├─start.png\n|   |   |  ├─start.reverse.png\n|   |   |  └wechat.png\n|   |   ├─font : 所有的字体文件放这\n|   |   |  ├─fa-brands-400.eot\n|   |   |  ├─fa-brands-400.svg\n|   |   |  ├─fa-brands-400.ttf\n|   |   |  ├─fa-brands-400.woff\n|   |   |  ├─fa-brands-400.woff2\n|   |   |  ├─fa-regular-400.eot\n|   |   |  ├─fa-regular-400.svg\n|   |   |  ├─fa-regular-400.ttf\n|   |   |  ├─fa-regular-400.woff\n|   |   |  ├─fa-regular-400.woff2\n|   |   |  ├─fa-solid-900.eot\n|   |   |  ├─fa-solid-900.svg\n|   |   |  ├─fa-solid-900.ttf\n|   |   |  ├─fa-solid-900.woff\n|   |   |  ├─fa-solid-900.woff2\n|   |   |  ├─iconfont.eot\n|   |   |  ├─iconfont.svg\n|   |   |  ├─iconfont.ttf\n|   |   |  ├─iconfont.woff\n|   |   |  └SourceHanSansCN.otf\n|   |   ├─css : 所有的样式文件放这\n|   |   |  ├─style.styl : 引用了所有的样式\n|   |   |  ├─_plugin : 所有第三方样式插件\n|   |   |  |    ├─APlayer.min.css\n|   |   |  |    ├─fontawesome.min.css\n|   |   |  |    ├─github-markdown.min.css\n|   |   |  |    ├─highlight.styl\n|   |   |  |    └share.min.css\n|   |   |  ├─_part : 所有组件样式\n|   |   |  |   ├─audioplayer.styl\n|   |   |  |   ├─brand.styl\n|   |   |  |   ├─codelib.styl\n|   |   |  |   ├─comment.styl\n|   |   |  |   ├─extension.styl\n|   |   |  |   ├─footer.styl\n|   |   |  |   ├─gallery.styl\n|   |   |  |   ├─goingto.styl\n|   |   |  |   ├─hitokoto.styl\n|   |   |  |   ├─menus.styl\n|   |   |  |   ├─page.styl\n|   |   |  |   ├─panels.styl\n|   |   |  |   ├─pather.styl\n|   |   |  |   ├─post.styl\n|   |   |  |   ├─recentposts.styl\n|   |   |  |   ├─records.styl\n|   |   |  |   ├─search.styl\n|   |   |  |   ├─settings.styl\n|   |   |  |   ├─sitename.styl\n|   |   |  |   ├─skin.styl\n|   |   |  |   ├─timeline.styl\n|   |   |  |   ├─toc.styl\n|   |   |  |   ├─translater.styl\n|   |   |  |   ├─xaside.styl\n|   |   |  |   ├─xcanvas.styl\n|   |   |  |   ├─xdrawer.styl\n|   |   |  |   └xsearch.styl\n|   |   |  ├─_common : 包含所有页面的通用样式\n|   |   |  |    ├─color.styl : 所有的受皮肤影响的颜色配置\n|   |   |  |    ├─dimension.styl : 所有的固定距离、固定值等配置\n|   |   |  |    └layout.styl : 所有页面通用样式，主要包含“m-”开头的主模板样式\n├─scripts : 主题预处理脚本文件夹\n|    ├─$filter.js\n|    ├─$helper.js\n|    ├─$renderer.js\n|    ├─renderer\n|    |    ├─$partplus.js\n|    |    └$template.js\n|    ├─plugin : 放改过的预处理时用到的第三方插件\n|    |   ├─pangunode.js\n|    |   ├─toc.js\n|    |   ├─hexo-generator-restful\n|    |   |           ├─index.js\n|    |   |           ├─lib\n|    |   |           |  └generator.js\n|    |   ├─hexo-abbrlink\n|    |   |       ├─index.js\n|    |   |       ├─lib\n|    |   |       |  ├─crc16.js\n|    |   |       |  ├─crc32.js\n|    |   |       |  ├─logic.js\n|    |   |       |  └model.js\n|    ├─helper : 放预处理渲染生成期间用到的函数\n|    |   ├─$count.js\n|    |   ├─$css.js\n|    |   ├─$encode.js\n|    |   ├─$forIn.js\n|    |   ├─$gallery.js\n|    |   ├─$js.js\n|    |   ├─$min2read.js\n|    |   ├─$mjs.js\n|    |   ├─$nomjs.js\n|    |   ├─$word4post.js\n|    |   └$word4site.js\n├─layout : 主题预处理页面模板文件夹\n|   ├─archive.ejs : 管理所有归档页面头部涉及的数据\n|   ├─index.ejs : 管理首页面头部涉及的数据\n|   ├─page.ejs : 管理所有单独页面头部涉及的数据\n|   ├─post.ejs : 管理所有文章页面头部涉及的数据\n|   ├─_partial\n|   |    └frame.ejs : 网页模板，增减改组件和修改头部模板时涉及\n```\n\n## 普通使用主题时涉及的文件及文件夹\n\n```\n├─_config.yml : 主题配置文件，改菜单、改图标、改皮肤、改音乐/一言组件配置、新增组件时涉及\n├─source : 主题资源文件夹\n|   ├─asset\n|   |   ├─part : 所有组件模板文件放这\n|   |   ├─lang : 所有的语言界面资源文件放这\n|   |   |  ├─en.yml : 英文\n|   |   |  └zh-cn.yml : 中文\n|   |   ├─js : 所有的JS资源文件放这\n|   |   | ├─main.js : 管理所有资源的加载和程序\n|   |   | ├─part : 所有组件加载必要的模块\n|   |   ├─css : 所有的样式文件放这\n|   |   |  ├─style.styl : 引用了所有的样式\n|   |   |  ├─_part : 所有组件样式\n├─layout : 主题预处理页面模板文件夹\n|   ├─_partial\n|   |    └frame.ejs : 网页模板，增减改组件和修改头部模板时涉及\n```\n\n# source目录结构\n\n再来看看[source](//github.com/jinyaoMa/ma-jinyao.cn/tree/master/source)的目录结构。\n\n```\n├─CNAME : 锁定github pages域名定向\n├─_posts : 所有的文章\n|   ├─Gallery-Post-Not-Supported.md\n|   ├─Hello-Hexo.md\n|   ├─Helpful-Links.md\n|   ├─HTTP是什么？.md\n|   ├─Markdown-Basic-Syntax.md\n|   ├─Oracle-SQL-Basic-Usage.md\n|   ├─TCP-IP是什么？.md\n|   ├─主题hexo-theme-mustom使用指南.md\n|   ├─旧版日记仿markdown编译代码.md\n|   ├─测试区2048JS代码.md\n|   └网易云音乐歌单JS音乐播放器JS代码.md\n├─resume : 这是个“简历小贴士”单页面\n|   └index.md\n├─records : 这是个“记录”单页面\n|    ├─content.yml : 记录组件加载时从这里读取数据\n|    └index.md\n├─library : 这是个“代码库”单页面\n|    └index.md\n├─letter : 这是个“求职信小贴士”单页面\n|   └index.md\n├─gallery : 这是个“图库”单页面\n|    ├─FaceQ1583444636773.png\n|    ├─http-request-example.jpg\n|    ├─http-request-format.png\n|    ├─http-response-example.jpg\n|    ├─http-response-format.png\n|    ├─index.md\n|    ├─tcp-ip-ipv6-prefix.jpg\n|    ├─tcp-ip-router-network.jpg\n|    ├─tcp-ip-router-subnet.jpg\n|    ├─wallpaper-2311325.jpg\n|    ├─wallpaper-2572384.jpg\n|    ├─wallpaper-878514.jpg\n|    ├─yao2048-0.jpg\n|    └yaoplayer-0.jpg\n├─extension : 这个是本站左下角的扩展功能\n|     ├─content.yml : 扩展组件加载时从这里读取数据\n|     ├─test : “测试”扩展\n|     ├─resume : “简历生成”扩展\n|     ├─palette : “图像颜色提取”扩展\n|     ├─letter : “求职信”扩展\n├─code : 所有使用Hexo标签“include_code”的代码文件都放这\n├─about : 这是个“关于”单页面\n|   └index.md\n```\n\n# 新建单页面例子\n\n**注：需要我的scaffolds/page.md模板为前提**\n\n假如我要新建一个“友链”单页面，我需要运行新建命令：\n\n``` bash\nhexo new page \"links\"\n```\n\n运行命令后得到以下新目录结构\n\n```\n├─_posts\n├─resume\n├─records\n├─links : 新“友链”单页面\n|   └index.md : 模板生成的index.md\n├─library\n├─letter\n├─gallery\n├─extension\n├─code\n├─about\n```\n\n如何修改`links/index.md`可以参考[about/index.md](//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/source/about/index.md)\n\n## 添加菜单项目\n\n在主题配置`_config.yml`中，按格式新增`menus`下的项目\n\n``` yml\nmenus:\n  main: # 项目组\n    home: # 项目\n      url: / # 项目链接\n      icon: '<i class=\"fas fa-home fa-fw\"></i>' # 项目图标\n    archive: # 项目\n      url: /archives/ # 项目链接\n      icon: '<i class=\"fas fa-archive fa-fw\"></i>' # 项目图标\n    about: # 项目\n      url: /about/ # 项目链接\n      icon: '<i class=\"fas fa-user fa-fw\"></i>' # 项目图标\n    links: # 新项目 <----------------------------------------------------\n      url: /links/  # 新项目链接 <----------------------------------------\n      icon: '<i class=\"fas fa-link fa-fw\"></i>' # 新项目图标 <------------\n```\n\n接下来，在主题`source/asset/lang`文件夹中的`.yml`语言文件新增`menus`下的项目\n\n``` yml\nmenus:\n  main: # 对应_config.yml中的项目组\n    caption: 本站 # 项目组名称\n    items: # 对应_config.yml中的项目\n      home: 首页 # 项目名称\n      archive: 归档 # 项目名称\n      about: 关于 # 项目名称\n      links: 友链 # 新项目名称 <-----------------------------------------\n```\n\n# 新建文章例子\n\n**注：需要我的scaffolds/post.md模板为前提**\n\n假如我要新建一个“HTTP是什么？”文章，我需要运行新建命令：\n\n``` bash\nhexo new \"HTTP是什么？\"\n```\n\n运行命令后得到以下新目录结构\n\n```\n├─_posts\n|   └HTTP是什么？.md : 新“HTTP是什么？”文章\n├─resume\n├─records\n├─links\n├─library\n├─letter\n├─gallery\n├─extension\n├─code\n├─about\n```\n\n打开`HTTP是什么？.md`，可以看到front-matter中没有abbrlink，没有关系，这是自动生成。**如果文章里使用了MathJax，需要设置`mathjax: true`。**\n\n``` yml\n---\ntitle: HTTP是什么？\ncategories:\n  - - null # 分类设置\ntags:\n  - null # 标签设置\nmathjax: false\ndate: 2020-04-10 14:15:34\nupdated: 2020-04-10 14:15:34\n---\n```\n\n# 添加组件例子\n\n假如我要在“友链”单页面里添加一个像\"记录\"单页面下的记录组件，命名为`links`组件：\n\n**首先，在Hexo根目录下`source/links`文件夹建立一个`content.yml`用以记录友链，里面的内容可以是这样的：**\n\n``` yml source/links/content.yml\n# 友链模板\n- name: jinyaoMa\n  site: //ma-jinyao.cn\n  avatar: //ma-jinyao.cn/asset/img/author.medium.png\n# 其他友链\n- name: Test\n  site: //baidu.com\n  avatar: \"\"\n\n# ...以此类推\n```\n\n**然后，在主题目录`themes/mustom`新建和修改以下必要的文件：**\n\n```\n├─_config.yml : 添加需要的图标\n├─source\n|   ├─asset\n|   |   ├─part\n|   |   |  └links.ejs : 必要“组件模板”\n|   |   ├─lang\n|   |   |  ├─en.yml : 添加需要的英文文本\n|   |   |  └zh-cn.yml : 添加需要的中文文本\n|   |   ├─js\n|   |   | ├─part\n|   |   | |  └links.js : 必要“JS加载模块”\n|   |   ├─css\n|   |   |  ├─_part\n|   |   |  |   └links.styl : 必要“组件样式”\n```\n\n`links.ejs`：可以参照[asset/part/records.ejs](//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/part/records.ejs)组件模板，刚开始可以只有以下部分：\n\n``` html asset/part/links.ejs\n<div class=\"p-links\"><!-- 注意类名 -->\n  <div class=\"p-links-caption\"><!-- 窗口标题部分 -->\n    <%- theme.links.icon %><!-- 窗口标题图标 -->\n    <span data-lang=\"links.caption\"><!-- 加载语言文件中links.caption的字符串 --></span>\n  </div>\n<div>\n```\n\n在`_config.yml`中添加以下代码：\n\n``` yml\nlinks:\n  icon: '<i class=\"fas fa-link fa-fw\"></i>'\n```\n\n在`en.yml`和`zh-cn.yml`中添加以下代码：\n\n``` yml en.yml\nlinks:\n  caption: LINKS\n```\n\n``` yml zh-cn.yml\nlinks:\n  caption: 友链\n```\n\n`links.js`：可以参照[asset/js/part/records.js](//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/js/part/records.js)加载模块，刚开始可以只有以下部分：\n\n``` js asset/js/part/links.js\nimport part from \"../common/part.js\";\nlet tag = 'links'; // 注意标签名\nlet element = null;\nconst init = (params, callback) => {\n  part(tag, el => {\n    element = el;\n    document.querySelector(tag).replaceWith(element);\n    callback && callback(element);\n  });\n};\nexport default {\n  tag,\n  init\n};\n```\n\n`links.styl`：可以参照[asset/css/_part/records.styl](//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/css/_part/records.styl)组件样式，刚开始可以什么样式都没有。\n\n**完成必要文件的新建之后，就要把这个组件加载到页面上，需要修改一下文件：**\n\n在Hexo根目录`source/links/index.md`里面的front-matter中标记这个组件。\n\n``` yml source/links/index.md\n---\ntitle: links\nlayout: page\nname: links\nparts: \n  - page\n  - links # 标记组件\n---\n```\n\n在`themes/mustom`主题目录中`source/asset/css/style.styl`引用`links.styl`。\n\n``` styl \n// 文件末尾添加\n@import '_part/links'\n```\n\n在`themes/mustom`主题目录中`source/asset/js/main.js`对号插入以下代码：\n\n``` js\n// 头部所有import下面\nimport links from './part/links.js';\n\n/* Ctrl+F 查找 “Extra Operations”，在“Extra Operations”下添加代码加载组件到“links”单页面 */\n// Extra Operations\nif (/^\\/(links)\\//.test(pathname())) {\n  ajax({\n    url: `/links/content.json`, // content.yml 预编译成的JSON文件，友链的记录文件\n    method: 'get',\n    dataType: 'json',\n    success(data) {\n      parts.includes('links') && links.init({\n        data\n      }, el => {\n        checklist.links = true;\n        progress.step(stepping);\n      });\n    }\n  });\n}\n```\n\n在`themes/mustom`主题目录中`layout/_partial/frame.ejs`中`div.m-content`插入组件标签`<links></links>`。\n\n**通过以上步骤就能把组件添加到单页面“友链”中**\n\n# 删除单页面组件\n\n想要停用某个单页面组件只要在单页面所属`source/YourPage/index.md`里面的front-matter中注释掉组件标记即可，例如：\n\n``` yml\n---\ntitle: links\nlayout: page\nname: links\nparts: \n  - page\n  # - links # 注释掉组件标记\n---\n```\n\n本文章转载于(https://ma-jinyao.cn/posts/49651)","categories":["Hexo"],"tags":["Mustom"]}]